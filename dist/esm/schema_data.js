// AUTO-GENERATED by copy-schemas.cjs. Do not edit manually.
/* eslint-disable */
export const envelope_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/envelope.schema.json",
    "title": "Alteriom MQTT Base Envelope v1",
    "type": "object",
    "required": [
        "schema_version",
        "device_id",
        "device_type",
        "timestamp",
        "firmware_version"
    ],
    "properties": {
        "schema_version": {
            "type": "integer",
            "const": 1
        },
        "device_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[A-Za-z0-9_-]+$"
        },
        "device_type": {
            "type": "string",
            "enum": [
                "sensor",
                "gateway"
            ]
        },
        "timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "firmware_version": {
            "type": "string",
            "minLength": 1,
            "maxLength": 40
        },
        "hardware_version": {
            "type": "string",
            "maxLength": 80
        }
    },
    "additionalProperties": true
};
export const sensor_data_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/sensor_data.schema.json",
    "title": "Sensor Data Message v1",
    "allOf": [
        {
            "$ref": "envelope.schema.json"
        }
    ],
    "type": "object",
    "required": [
        "sensors"
    ],
    "properties": {
        "sensors": {
            "type": "object",
            "minProperties": 1,
            "additionalProperties": {
                "type": "object",
                "required": [
                    "value"
                ],
                "properties": {
                    "value": {
                        "type": [
                            "number",
                            "integer"
                        ]
                    },
                    "unit": {
                        "type": "string"
                    },
                    "raw_value": {
                        "type": [
                            "number",
                            "integer"
                        ]
                    },
                    "calibrated_value": {
                        "type": [
                            "number",
                            "integer"
                        ]
                    },
                    "quality_score": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                    },
                    "name": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "additional_data": {
                        "type": "object"
                    }
                },
                "additionalProperties": false
            }
        },
        "battery_level": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
        },
        "signal_strength": {
            "type": "integer",
            "minimum": -200,
            "maximum": 0
        },
        "additional": {
            "type": "object"
        }
    },
    "additionalProperties": true
};
export const sensor_heartbeat_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/sensor_heartbeat.schema.json",
    "title": "Sensor Heartbeat v1",
    "type": "object",
    "required": [
        "schema_version",
        "device_id",
        "device_type",
        "timestamp"
    ],
    "properties": {
        "schema_version": {
            "type": "integer",
            "const": 1
        },
        "device_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[A-Za-z0-9_-]+$"
        },
        "device_type": {
            "type": "string",
            "enum": [
                "sensor",
                "gateway"
            ]
        },
        "timestamp": {
            "type": "string",
            "format": "date-time"
        }
    },
    "additionalProperties": true
};
export const sensor_status_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/sensor_status.schema.json",
    "title": "Sensor Status v1",
    "allOf": [
        {
            "$ref": "envelope.schema.json"
        }
    ],
    "type": "object",
    "required": [
        "status"
    ],
    "properties": {
        "status": {
            "type": "string",
            "enum": [
                "online",
                "offline",
                "updating",
                "error"
            ]
        },
        "battery_level": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
        },
        "signal_strength": {
            "type": "integer",
            "minimum": -200,
            "maximum": 0
        }
    },
    "additionalProperties": true
};
export const gateway_info_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/gateway_info.schema.json",
    "title": "Gateway Info v1",
    "allOf": [
        {
            "$ref": "envelope.schema.json"
        }
    ],
    "type": "object",
    "properties": {
        "mac_address": {
            "type": "string",
            "pattern": "^[0-9A-Fa-f:]{17}$"
        },
        "ip_address": {
            "type": "string",
            "format": "ipv4"
        },
        "capabilities": {
            "type": "object",
            "properties": {
                "max_nodes": {
                    "type": "integer",
                    "minimum": 0
                },
                "supports_mesh": {
                    "type": "boolean"
                },
                "firmware_update": {
                    "type": "boolean"
                }
            },
            "additionalProperties": true
        }
    },
    "additionalProperties": true
};
export const gateway_metrics_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/gateway_metrics.schema.json",
    "title": "Gateway Metrics v1",
    "allOf": [
        {
            "$ref": "envelope.schema.json"
        }
    ],
    "type": "object",
    "required": [
        "metrics"
    ],
    "properties": {
        "metrics": {
            "type": "object",
            "required": [
                "uptime_s"
            ],
            "properties": {
                "uptime_s": {
                    "type": "integer",
                    "minimum": 0
                },
                "cpu_usage_pct": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100
                },
                "memory_usage_pct": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100
                },
                "temperature_c": {
                    "type": "number"
                },
                "connected_devices": {
                    "type": "integer",
                    "minimum": 0
                },
                "mesh_nodes": {
                    "type": "integer",
                    "minimum": 0
                },
                "packet_loss_pct": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100
                },
                "data_throughput_kbps": {
                    "type": "number",
                    "minimum": 0
                }
            },
            "additionalProperties": true
        }
    },
    "additionalProperties": true
};
export const firmware_status_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/firmware_status.schema.json",
    "title": "Firmware Update Status v1",
    "allOf": [
        {
            "$ref": "envelope.schema.json"
        }
    ],
    "type": "object",
    "required": [
        "status"
    ],
    "properties": {
        "event": {
            "type": "string"
        },
        "from_version": {
            "type": "string"
        },
        "to_version": {
            "type": "string"
        },
        "status": {
            "type": "string",
            "enum": [
                "pending",
                "downloading",
                "flashing",
                "verifying",
                "rebooting",
                "completed",
                "failed"
            ]
        },
        "progress_pct": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
        },
        "error": {
            "type": [
                "string",
                "null"
            ]
        }
    },
    "additionalProperties": true
};
export const control_response_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/control_response.schema.json",
    "title": "Control / Command Response v1",
    "allOf": [
        {
            "$ref": "envelope.schema.json"
        }
    ],
    "type": "object",
    "required": [
        "status"
    ],
    "properties": {
        "command": {
            "type": "string"
        },
        "status": {
            "type": "string",
            "enum": [
                "ok",
                "error"
            ]
        },
        "message": {
            "type": "string"
        },
        "result": {
            "type": [
                "object",
                "array",
                "string",
                "number",
                "boolean",
                "null"
            ]
        }
    },
    "additionalProperties": true
};
export const command_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/command.schema.json",
    "title": "Device Command v1",
    "description": "Command message sent from MQTT client to IoT device for control operations",
    "allOf": [
        {
            "$ref": "envelope.schema.json"
        }
    ],
    "type": "object",
    "required": [
        "event",
        "command"
    ],
    "properties": {
        "event": {
            "type": "string",
            "const": "command",
            "description": "Event type discriminator"
        },
        "command": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-z][a-z0-9_]*$",
            "description": "Command name in snake_case (e.g., read_sensors, set_interval, restart)",
            "examples": [
                "read_sensors",
                "set_interval",
                "enable_sensor",
                "update_config",
                "restart",
                "get_status"
            ]
        },
        "correlation_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "pattern": "^[A-Za-z0-9_-]+$",
            "description": "Unique identifier for tracking command → response lifecycle"
        },
        "parameters": {
            "type": "object",
            "description": "Command-specific parameters (validated by device)",
            "additionalProperties": true,
            "examples": [
                {
                    "interval": 30000
                },
                {
                    "sensor": "temperature",
                    "enabled": true
                },
                {
                    "immediate": true,
                    "sensors": [
                        "temperature",
                        "humidity"
                    ]
                }
            ]
        },
        "timeout_ms": {
            "type": "integer",
            "minimum": 1000,
            "maximum": 300000,
            "default": 5000,
            "description": "Command execution timeout in milliseconds"
        },
        "priority": {
            "type": "string",
            "enum": [
                "low",
                "normal",
                "high",
                "urgent"
            ],
            "default": "normal",
            "description": "Command priority for queue management"
        }
    },
    "additionalProperties": true
};
export const command_response_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/command_response.schema.json",
    "title": "Command Response v1",
    "description": "Response message from IoT device after executing a command",
    "allOf": [
        {
            "$ref": "envelope.schema.json"
        }
    ],
    "type": "object",
    "required": [
        "event",
        "success"
    ],
    "properties": {
        "event": {
            "type": "string",
            "const": "command_response",
            "description": "Event type discriminator"
        },
        "command": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "description": "Original command name that was executed"
        },
        "correlation_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "pattern": "^[A-Za-z0-9_-]+$",
            "description": "Matches correlation_id from original command"
        },
        "success": {
            "type": "boolean",
            "description": "Whether command execution succeeded"
        },
        "result": {
            "type": [
                "object",
                "array",
                "string",
                "number",
                "boolean",
                "null"
            ],
            "description": "Command execution result data"
        },
        "message": {
            "type": "string",
            "maxLength": 256,
            "description": "Human-readable status message"
        },
        "error_code": {
            "type": "string",
            "maxLength": 64,
            "description": "Machine-readable error code (e.g., TIMEOUT, INVALID_PARAMS)"
        },
        "latency_ms": {
            "type": "integer",
            "minimum": 0,
            "description": "Time taken to execute command in milliseconds"
        }
    },
    "additionalProperties": true
};
export const mesh_node_list_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/mesh_node_list.schema.json",
    "title": "Mesh Node List v1",
    "allOf": [
        {
            "$ref": "envelope.schema.json"
        }
    ],
    "type": "object",
    "required": [
        "nodes"
    ],
    "properties": {
        "nodes": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "node_id"
                ],
                "properties": {
                    "node_id": {
                        "type": "string",
                        "description": "Unique node identifier"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "online",
                            "offline",
                            "unreachable"
                        ],
                        "description": "Current node status"
                    },
                    "last_seen": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Last communication timestamp"
                    },
                    "signal_strength": {
                        "type": "integer",
                        "minimum": -200,
                        "maximum": 0,
                        "description": "Signal strength in dBm"
                    }
                },
                "additionalProperties": true
            }
        },
        "node_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of nodes"
        },
        "mesh_id": {
            "type": "string",
            "description": "Mesh network identifier"
        }
    },
    "additionalProperties": true
};
export const mesh_topology_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/mesh_topology.schema.json",
    "title": "Mesh Network Topology v1",
    "allOf": [
        {
            "$ref": "envelope.schema.json"
        }
    ],
    "type": "object",
    "required": [
        "connections"
    ],
    "properties": {
        "connections": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "from_node",
                    "to_node"
                ],
                "properties": {
                    "from_node": {
                        "type": "string",
                        "description": "Source node ID"
                    },
                    "to_node": {
                        "type": "string",
                        "description": "Destination node ID"
                    },
                    "link_quality": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "description": "Link quality score (0-1)"
                    },
                    "latency_ms": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Link latency in milliseconds"
                    },
                    "hop_count": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "Number of hops in path"
                    }
                },
                "additionalProperties": true
            }
        },
        "root_node": {
            "type": "string",
            "description": "Root node ID (gateway/bridge)"
        },
        "total_connections": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of connections"
        }
    },
    "additionalProperties": true
};
export const mesh_alert_schema = {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://schemas.alteriom.io/mqtt/v1/mesh_alert.schema.json",
    "title": "Mesh Network Alert v1",
    "allOf": [
        {
            "$ref": "envelope.schema.json"
        }
    ],
    "type": "object",
    "required": [
        "alerts"
    ],
    "properties": {
        "alerts": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "alert_type",
                    "severity",
                    "message"
                ],
                "properties": {
                    "alert_type": {
                        "type": "string",
                        "enum": [
                            "low_memory",
                            "node_offline",
                            "connection_lost",
                            "high_latency",
                            "packet_loss",
                            "firmware_mismatch",
                            "configuration_error",
                            "security_warning",
                            "other"
                        ],
                        "description": "Type of alert"
                    },
                    "severity": {
                        "type": "string",
                        "enum": [
                            "critical",
                            "warning",
                            "info"
                        ],
                        "description": "Alert severity level"
                    },
                    "message": {
                        "type": "string",
                        "description": "Human-readable alert message"
                    },
                    "node_id": {
                        "type": "string",
                        "description": "Related node ID (if applicable)"
                    },
                    "metric_value": {
                        "type": "number",
                        "description": "Related metric value (if applicable)"
                    },
                    "threshold": {
                        "type": "number",
                        "description": "Threshold that triggered alert"
                    },
                    "alert_id": {
                        "type": "string",
                        "description": "Unique alert identifier"
                    }
                },
                "additionalProperties": true
            }
        },
        "alert_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of active alerts"
        }
    },
    "additionalProperties": true
};
export const mqtt_v1_bundle_json = {
    "$comment": "Convenience bundle referencing all v1 schema artifact filenames for tooling discovery.",
    "version": 1,
    "schemas": {
        "envelope": "envelope.schema.json",
        "sensor_data": "sensor_data.schema.json",
        "sensor_heartbeat": "sensor_heartbeat.schema.json",
        "sensor_status": "sensor_status.schema.json",
        "gateway_info": "gateway_info.schema.json",
        "gateway_metrics": "gateway_metrics.schema.json",
        "firmware_status": "firmware_status.schema.json",
        "control_response": "control_response.schema.json",
        "command": "command.schema.json",
        "command_response": "command_response.schema.json",
        "mesh_node_list": "mesh_node_list.schema.json",
        "mesh_topology": "mesh_topology.schema.json",
        "mesh_alert": "mesh_alert.schema.json"
    }
};
export const ota_ota_manifest_schema = {
    "$id": "https://schemas.alteriom.com/ota/ota-manifest.schema.json",
    "title": "Alteriom OTA Firmware Manifest",
    "description": "Schema for Alteriom OTA firmware manifests supporting both rich and minimal variants",
    "type": "object",
    "oneOf": [
        {
            "title": "Rich Manifest",
            "description": "Rich manifest format with environment, branch, and manifests object",
            "type": "object",
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "Target environment (e.g., universal-sensor)"
                },
                "branch": {
                    "type": "string",
                    "description": "Source control branch the build originated from"
                },
                "manifests": {
                    "type": "object",
                    "description": "Build variants keyed by type (dev, prod, etc.)",
                    "patternProperties": {
                        "^[a-z][a-z0-9-]*$": {
                            "$ref": "#/$defs/richEntry"
                        }
                    },
                    "additionalProperties": false,
                    "minProperties": 1
                }
            },
            "required": [
                "environment",
                "branch",
                "manifests"
            ],
            "additionalProperties": true
        },
        {
            "title": "Minimal Environment Map",
            "description": "Minimal manifest format as environment -> channels mapping",
            "type": "object",
            "patternProperties": {
                "^[a-z][a-z0-9-]*$": {
                    "type": "object",
                    "description": "Environment entry with channel mappings",
                    "patternProperties": {
                        "^[a-z][a-z0-9-]*$": {
                            "$ref": "#/$defs/minimalChannel"
                        }
                    },
                    "additionalProperties": false,
                    "minProperties": 1
                }
            },
            "additionalProperties": false,
            "minProperties": 1
        }
    ],
    "$defs": {
        "richEntry": {
            "title": "Rich Build Entry",
            "description": "Rich manifest build entry (dev or prod)",
            "type": "object",
            "properties": {
                "build_type": {
                    "type": "string",
                    "enum": [
                        "dev",
                        "prod"
                    ],
                    "description": "Build type identifier"
                },
                "file": {
                    "type": "string",
                    "description": "Firmware binary filename"
                },
                "size": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Total firmware size in bytes"
                },
                "sha256": {
                    "type": "string",
                    "pattern": "^[a-f0-9]{64}$",
                    "description": "SHA256 hash of the full firmware binary (lowercase hex)"
                },
                "firmware_version": {
                    "type": "string",
                    "description": "Semantic or build version string"
                },
                "built": {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO8601 timestamp when built"
                },
                "ota_url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Absolute or relative URL to fetch the firmware"
                },
                "chunk_size": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Size of each chunk except possibly the last"
                },
                "chunks": {
                    "description": "Either structured chunk objects or array of SHA256 strings",
                    "oneOf": [
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/chunkObject"
                            },
                            "description": "Array of structured chunk objects with metadata"
                        },
                        {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "pattern": "^[a-f0-9]{64}$",
                                "description": "SHA256 hash of chunk (lowercase hex)"
                            },
                            "description": "Array of SHA256 strings for chunks"
                        }
                    ]
                }
            },
            "required": [
                "build_type",
                "file",
                "size",
                "sha256",
                "firmware_version",
                "built",
                "ota_url"
            ],
            "additionalProperties": true
        },
        "chunkObject": {
            "title": "OTA Chunk Object",
            "description": "Structured chunk metadata with offset and size",
            "type": "object",
            "properties": {
                "index": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "0-based sequential chunk index"
                },
                "offset": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Byte offset within firmware binary"
                },
                "size": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Chunk size in bytes"
                },
                "sha256": {
                    "type": "string",
                    "pattern": "^[a-f0-9]{64}$",
                    "description": "SHA256 hash of the chunk (lowercase hex)"
                }
            },
            "required": [
                "index",
                "offset",
                "size",
                "sha256"
            ],
            "additionalProperties": true
        },
        "minimalChannel": {
            "title": "Minimal Channel Entry",
            "description": "Minimal manifest channel entry",
            "type": "object",
            "properties": {
                "file": {
                    "type": "string",
                    "description": "Firmware binary filename"
                },
                "size": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Total firmware size in bytes"
                },
                "sha256": {
                    "type": "string",
                    "pattern": "^[a-f0-9]{64}$",
                    "description": "SHA256 hash of the firmware binary (lowercase hex)"
                },
                "version": {
                    "type": "string",
                    "description": "Firmware version string"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO8601 timestamp"
                }
            },
            "required": [
                "file",
                "size",
                "sha256",
                "version",
                "timestamp"
            ],
            "additionalProperties": true
        }
    }
};
